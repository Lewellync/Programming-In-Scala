Traits are a fundamental part of code reuse in Scala. A trait encapsulates method
and field definitions which can be reused by mixing them into classes. Different
than class inheritance, a class can mix in any number of traits. They are similar
to interfaces, but have the capabilities of abstract classes.

Some basics of traits : Philosopher.scala

TLDR: Traits are like way more powerful Java interfaces, and act pretty similarly
when you get down to the nuts and bolts of it all.

Thin vs Rich Interfaces

One major use of traits is to automatically add methods to a class in terms of
methods the class already has. Thin interfaces have few methods, so clients get
less out of them, but implementers can implement them faster and easier. Rich
interfaces the opposite is true.

In Java interfaces are often thin, because there can be no concrete methods in
an interface. But Scala traits can contain concrete methods! Making rich methods
the more convenient option most of the time.

To get this working in Scala, when you design a trait, try to create a small
number of abstract methods (thin part) and a large number of concrete methods
implemented using those abstract methods. When a class mixes in this trait and
implements the abstract methods, they gain access to all of the concrete methods
without having to implement them themselves! Neat.

Encrichment traits : Rectangle.scala

Comparison is another domain where rich interface is convenient. Consider how a
Java rich interface would implement the ordering of some objects through the
methods <, >, <=, >=, and how these could be improved by the Scala trait Ordered.

See : OrderedRational.scala

Traits as Stackable Modifications

You know what's great? Stacks. Stacks of pizza, of cheese, of traits. Wait what.
So in addition to adding functionality, traits can also modify base functionality
of classes and stack on top of each other for CRAZY FUNCTIONALITY

See : IntQueue.scala

So why is trait stacking done the way it is? What are other ways of doing the same
thing, like multiple inheritance? One of the primary reason Scala does it this way
is because of the interpretation of super. With multiple inheritance, the method
called by super can be determined right where the call appears.

With traits, the method called is determined by a linearization of the classes and
traits that are mixed into a class. This is the difference that enables the stacking
of modifications shown at the end of IntQueue.scala.

Refer back to: IntQueue.scala Line 103

Let's talk linearization, and how it works. When you instantiate a class with new,
Scala takes the class and all of its inherited classes and traits, and puts them in a
single, linear order. Then, whenever you call super inside one of those classes, it
looks up the linearization order to determine what implementation to use.

See : Linearization.scala

To Trait or not to Trait?
Whenever you implement a reusable collection of behavior, you will have to decide
whether you want to use a trait or an abstract class. There is no firm rule, but
there are some guidelines that can help make the decision for you!

If the behavior will not be reused, then make it a concrete class.

If it might be reused in multiple unrelated classes, make it a trait.

If you want to inherit from it in Java code, use an abstract class.

If you plan to distribute it in compiled form, and you expect outside groups to
write classes inheriting form it, you may lean towards using an abstract class.

If you don't know after considering the above, start as a trait.
