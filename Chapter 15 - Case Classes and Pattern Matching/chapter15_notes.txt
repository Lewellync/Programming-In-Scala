
Case classes and pattern matching are two constructs that support writing regular,
non-encapsulated data structures. These two constructs are particularly helpful for
tree-like recursive data.

 == 15.1 ==

Let's get our feet wet with the concept and basic idea behind mapping with a simple
example concerning ourselves with manipulating arithmetic expressions.

-- L 15.1

The above hierarchy includes an abstract base class and four subclasses, one for each
kind of expression being considered. The bodies of all five classes are empty, as previously
mentioned, in Scala you can leave out the braces around an empty class body if you wish.

Case Classes
The other noteworthy thing 15.1 is that each subclass has a case modifier. Classes with
such a modifier are called case classes (go figure). Using this modifier gives you that
sweet sweet syntactic sugar.

It adds a factory method with the name of the class. You can write 'Var("x")' instead of
'new Var("x")'. These factory methods are useful when nested, because there are no 'new'
keywords sprinkled throught the code. For instance:

val v = Var("x")
val op = BinOp("+", Number(1), v)

Another syntactic convenience is that all arguments in the parameter list of a case class
implicitly get a val prefix, so they are maintained as fields. The compiler adds "natural"
implementations of methods toString, hashCode, and equals to your class. Lastly, the compiler
adds a copy method to your class for making modified copies.

Very little tradeoffs for huge benefits.

-- L 15.2

The right-hand side of simplifyTop is a match expression, which is like switches but
is written after the selector expression.

A constant pattern like "-" or 1 matches value that are equal to the constant with
respect to ==

A variable pattern like 'e' matches every value. The variable then refers to that
value in the right hand side of the case clause.

A wildcard pattern(_) also matches every value, but does not introduce a variable name
to refer to that value. In 15.2, the default case does nothing with the expression.

A constructor pattern looks like 'UnOp("-", e)'. This pattern matches all values of type
UnOp whose first argument matches "-" and whose second matches e. Note that the arguments
to the constructor are themselves pattern.

A match must always have a default case, otherwise it will throw a MatchError.
-- L 15.3

 == 15.2 ==

Let's go back and look at each pattern introduced in 15.1 in detail and understand
how each of them works.

Wildcard Pattern
The wildcard pattern (_) matches any object whatsoever, as shown at the end of 15.2
and 15.3. Wildcards can also be used to ignore parts of an object that you do not
care about. For example, in 15.3, we don't care about the operations, just that it
is a BinOp. The code can be rewritten and is in 15.4 to include wildcards.

Constant Patterns
A constant pattern only matches itself, ever. Any literal can be a constant, as shown
in 15.5. Important to note that Nil, a singleton object, is a pattern that matches
only the empty list.

Variable Patterns
A variable pattern matches the same as a wildcard, but binds the variable to whatever
the object is. You can then use the variable to act on the object further, as shown
in 15.6.

Constructor Patterns
Constructors are the first very powerful part of pattern matching. A construct pattern
looks like "BinOp("+", e, Number(0))", with a name and a number of patterns within
parentheses. This allows deep matching, and the inner patterns can themselves be
constructors. You can see this in 15.2 for double negation.

Sequence Patterns
You can also match against sequence types, like List or Array, just like you can
match against case classes. A list example with a fixed length is in 15.8. If you
want to match against an arbitrary length sequence, specify _* as the last element
of the pattern. This matches any number of elements within the sequence, and is shown
in 15.9.

Tuple Patterns
Just like sequences, you can match against tuples. This is not very different from
lists, but much less useful unless you use variables to specify the pattern parameters.

Typed Patterns
You can use a typed pattern as a convenient replacement for type tests and casts.
This is shown off in 15.11. What's done there can be rewritten using type checking
and casting shown in 15.11.1 in 15.12. Important to note because it's confusing, you
can't check the type of the elements inside of a Map as shown in 15.12.1, because of
type erasure! Generics aren't saved at runtime so you can't know the types of something,
the one exception being arrays. You can know what an array is because the type is
stored with the array value.

Variable Binding
In addition to the standalone variable patterns, you can also add a variable to any
other pattern. You simply write the variable name, an '@', and then the pattern.
It does the pattern match as normal, and if the pattern succeeds, sets the variable
to the matched object.

 == 15.3 ==

Sometimes, syntactic pattern matching is not precise enough, and in these instances,
we can add things like pattern guards. Say we want to replace a sum operation with
two identical operands 'e+e' with 'e*2'.

BinOp("+", Var("x"), Var("x")) transform to BinOp("*", Var("x"), Number(2))

You might try and make a rule like 15.14.1, but that doens't work! Scala restricts
patterns to be linear; a pattern variable may only appear once in a pattern. However,
with guards you can add a catch onto that pattern and it works in 15.14.

A pattern guard comes after the pattern and starts with an if, and is an arbitrary
boolean expression. If a pattern guard is present, the match only succeeds if the guard
evaluates to true. Other cases include:

case n: Int if 0 < n => ... positive integers
case s: String if s(0) == 'a' => ... strings that start with 'a'
