Lists are dope as hell, and pretty much magic. Probably the most commonly used data
structure in Scala, and this chapter will go into them in detail.

== 16.1 List Literals ==

Lists contains elements and are declared by stuff like List('a', 'b', 'c'). You knew
this already though. Lists are similar to arrays, but there are two important differences.
Lists are immutable; elements of a list cannot be changed by assignment. Second, lists
have a recursive structure (like linked lists) whereas arrays are flat.

== 16.2 The List Type ==

Like arrays, list are homogeneous; the elements of a list all have the same type.
The type of a list that has elements of type T is List[T]. The list type in Scala
is covariant; for each pair of types S and T, if S is a subtype of T, then List[S]
is a subtype of List[T]. For example, List[String] is a subtype of List[Object].

Note that the empty list has type List[Nothing]. Nothing is the bottom of Scala's
class hierarchy, and is a subtype of every other Scala type. Because lists are covariant,
it follows that List[Nothing] is a subtype of List[T] for any type T.

== 16.3 Constructing Lists ==

All lists are built from two building b1locks:
  Nil
  :: (cons)

Nil represents an empty list. The infix operator :: expresses list extension at the
front. That is to say, x :: xs represents a list whose first element x is followed
by the elements of list xs.

== 16.4 Basic Operations on Lists ==

All operations on lists can be expressed in terms of the following three:
  head      returns the first element of a list
  tail      returns a list consisting of all elements except the first
  isEmpty   returns true if the list is empty

These operations are defined as methods of class List.

== 16.5 List Patterns ==

Lists can also be taken apart using pattern matching. List patterns correspond one
by one to list expressions. You can either match all elements of a list using a pattern
of the form List(...) or you can take lists apart bit by bit using patterns composed
from :: and Nil.

Taking apart lists with patterns is an alternative to taking them apart with the
basic methods head, tail and isEmpty. 16.5.3 shows insertion sort done with pattern
matching.

== 16.6 First-Order Methods on Class List ==

A method is first-order if it does not take any functions as arguments. Fun!

Concatenating lists is simlar to the cons operator, and is written like ':::'.
This takes two lists as operands, and the result of xs ::: ys is a new list that
contains all elements of xs followed by ys.

Concatenation is implemented as a method in class List. It would be possible to implement
your own by hand, using pattern matching on lists as in 16.6.2.

Getting the length of a list is easy, but an O(n) operation. List.isEmpty will always
be better than calling List.length == 0.

Accessing the beginning and end of a list can be done with head and tail. List.last
will return the last element of a non-empty list, and List.init returns a list containing
all elements except the last one. Both last and init are O(n). Because of this, when
using lists, it is a good idea to organize data so that most accesses are at the
head of the list, rather than the last element.

Like all list operations, reverse returns a new list rather than changing the one it
operates on. This can be helpful if you find yourself often accessing the last element
of a list, as it may be more useful to use the reverse instead. The reverse, init,
and last operations satisfy some laws that can be used for reasoning about computations
and for simplifying programs

  1. reverse is its own inverse
    xs.reverse.reverse equals xs

  2. reverse turns init to tail and last to head, except that the elements are reversed
    xs.reverse.init = xs.tail.reverse
    xs.reverse.tail = xs.init.reverse
    xs.reverse.head = xs.last
    xs.reverse.last = xs.last

Reverse can also be implemented using concatenation (:::) just like append was.
The implementation in 16.6.6 is incredibly inefficient, and we'll figure out a better
version later on.

Prefix and suffix operations are also dope: drop, take and splitAt. The drop and
take opeartions generalize tail and init in that they return arbitrary prefixes
or suffixes of a list.

splitAt returns a tuple2 of lists, dividing the original list at the given index.

Random element selection is supported through the apply method, but is a less common
operation for lists than it is for arrays. As for all other types, apply is implicitly
inserted when an object appears in the function position in a method call.

Flattening lists is pretty interesting. Do you have multiple lists? Use flatten
and you can compact them into a single list. It can only be applied to lists whose
elements are all lists.

Zipping and unzipping is also nifty, and useful for complex functional programming
solutions. Zip takes two lists and forms a list of pairs. If two lists are different
lengths, any unmatched elements are dropped. Unzipping takes a tuple of lists and
creates the original two seperate lists.

A useful case is to zip a list with its index (16.6.10).

toString returns the canonical string representation of a list. If you want a different
representation, use mkString.

mkString has a bunch of things to make stuff look pretty, and is formatted by
abcde mkString(pre, sep, post) where pre and post come after each element and sep
is what seperates each element. I expands to:

  pre + xs(0) + sep + ... + sep + xs(xs.length-1) + post

mkString also has two overloaded variants. The first takes a seperator argument and
applies mkString with nothing as pre and post. mkString with no argument is the same
as mkString with a "" seperator

  xs mkString sep = xs mkString ("", sep, "")
  xs mkString = xs mkString ""

There are also variants of the mkString methods called addString which append the constructed
string to a StringBuilder object, rather than returning them as a result.

To convert data between the flat world of arrays and the recursive world of lists,
you can use method toArray in class List and toList in class Array

copyToArray copies list elements to successive array positions within some destination
array. The operation in 16.6.12 copies all elements of the list xs to the array arr,
beginning with the position 'start' You must ensure that the destination array arr is
large enough to hold the list in full.

Finally if you need to access list elements via an iterator, you can use the iterator
method to create one.

The insertion sort presented earlier (16.4.1) is concise to write, but is not very efficient
with average complexity proportional to the square of the length. Let's do merge sort
with currying and divide and conquer. Currying allows us to generalize the less than
method, so it can be implemented with ints, strings, etc.

  == 16.7 == Higher-order methods on class List ==

So after much regular list functions, we get to the fancy stuff that allows us to transform
map, verify properties and satisfy criterion with higher-order functions on lists.

The operation xs map f takes as operands a list xs and a function f, where f maps
some element of list xs to a resultant.

The flatMap operation is similar to map, but it takes a function returning a list
of elements as its right operand. It applies the function to each list element and
returns the concatenation of all function results.

In 16.7.1, you see map returns a list of lists while flatMap returns a single list
in which all element lists are concatenated. In 16.7.2, the map expression generates
a list of tuples (i, j) where j < i, and the outer flatMap generates this list for each
i between 1 and 5.

Third map-like operation is foreach, which takes a procedure (function with result
type unit) as right operand.
