3.7 - Array

Just like Java, you use the 'new' keyword to instantiate an object.

If you create an array or collection with the 'val' keyword, the variable will
always point to the same object instance with the parameters it was initialized
with. However, you can modify the elements contained within, so the array itself
is mutable.

General rule of Scala, if a method takes only one parameter, you can call it
without a dot or paren. Example :

  for (0 to 2)
  =
  for ((0).to(2))

Operators in Scala are not operators in the traditional sense.

  1 + 2
  =
  (1).+(2)

Operators in Scala are just method calls. Most things are method calls. I mean
like almost everything is a method call. When you access an array or give it a
value, you're calling a method on the array class.

  greetStrings(i)
  =
  greetStrings.apply(i)

  greetStrings(0) = "Hello"
  =
  greetStrings.update(0, "Hello")

3.8 - Lists

Another big concept in functional programming is that methods should not have
side effects; a method's only act should be to compute and return a value. We
know that arrays have mutable content, so we use Lists which are immutable.

If a method is used in operator notation (a + b) the method is invoked on the
left operand i.e. (a).+(b) means a is calling the + method with b as a parameter.
This is not the case if a method name ends in a colon it is invoked on the right
operand instead i.e. 1 :: twoThree = twoThree.::(1).

Note, there is a way to append to a list but it is a costly operation with a
linear scaling time while prepending takes constant time.

3.9 - Tuples

Tuples are like lists (immutable) but can contain a variety of objects rather
than be restricted to one type like an array or Lists. These are useful when
you want to return multiple objects from a method.

To access an object inside of a tuple, rather than tuple(index) you call
tuple._index+1. They are one-based rather than zero based like literally all
other things because Odersky has a hard-on for Haskell (I love you Odersky
please don't hate me). Also you'll forget this fact later on and have major
headaches because of it. Good luck!
