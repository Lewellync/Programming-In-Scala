
In Scala, every class inherits from a common superclass named 'Any'. Because
every class is a subclass, the methods defined in Any are universal; they may
be invoked on any object. On the other end of the spectrum are the subclasses
'Null' and 'Nothing'. They are a subclass of every other class.

Under Any are 'AnyRef' and 'AnyVal'. AnyVal is the base value class, supporting
things like Int and Char, while AnyRef is the base reference class, supporting
things like java.lang.Object.

How are primitives implemented?
Integers, for example, are stored as 32 bit words; the same as Java. This is for
efficiency on the JVM and for interoperability. Standard operations like
addition and division are implemented as primitive operations; Scala uses the
backup class java.lang.Integer for operations whenever an integer

On values, == means 'are the values the same'
On references, == means 'do they refer to the same thing'

Scala overrides Java's trap of using '==' versus 'equals'. Both look at value
equality, not reference equality.

When you want to do reference equality, you use 'eq' and 'ne'.

Class null is the type of null reference and a subclass of every reference class.
Class nothing is the subclass of every other type. Unlike null, there exists no
value to type nothing. It signals abnormal termination. It can be used for
something like:

  def divide(x: Int, y: Int): Int =
    if(y != 0) x / y
    else error("can't divide by zero")

A call to error has type nothing, but because nothing is a subtype of Int, the
conditional will always return an Int.

NOTE THAT YOU WILL FORGET: scala <file> wraps everything into a toplevel class
to enable scripting, so if you have class definitions on their own they will
fail. You need to use scalac.

Value Classes

You can define your own value classes : Currency.scala

Type Monoculture

To get the most benefit from the Scala class hierarchy, try to define a new
class for each domain concept, even when it would be possible to reuse to same
class for different purposes. Even if such a class lacks methods or fields, more
classes usually lets the comipler be a better tool to you as a programmer.

For example : HTMLGen.scala
